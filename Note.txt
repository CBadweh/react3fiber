Run the program
r3f_PhysicSim $ npm run dev


Following The lesson
1.  Create a Cube
    Understand
        Canvas
            Lighting
            boxMesh
                Component + Props for the box position, size, and color

2.  Animation
    Understand
        useFrame(state, delta) hook allow us to run callback function on every frame
            state - contain the properties of current scene eg clock, camera
            delta - time in sec since the last frame
        useRef() // have access to mesh properties

3.  Testing: Pause/Resume the animation using <button> component and useState(). Not using Lava
    Understand
        custom React Component <button>
            button update UI on "Pause Animation" or "Start Animation"
        useState() - trigger by <button> to pause/resume animation in useFrame()
        
        timerRef = useRef(0)
            when we pause the simulation, we also need to pause time to prevent jerk in the animation
            we accomplish this by using timerRef. If simulation is not running, don't increase time


4. Testing Passing info and Graphing using chartjs
    Passing info 
        Props are always passed from parent -> child
            if a function is passed as a prop, the child can call that function and send data ack to the parents
        ex: <Cube running={running} onUpdate={handleUpdate} />
            when the the child, Cube, call handleUpdate in useFrame(), it passes time and value to the parents
            sampleInterval control how many data to send back to the parents
            handleUpdate() save all the data from the Cubed and then pass it to PositionChart component to graph
    using chart js
        add tooltip for readin data point 
        initialize graph windows to 30 second


5. Add Inputs for speed


6. Add input for initial condition